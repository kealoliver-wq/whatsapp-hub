# create pages/ and api/ folders
mkdir -p pages/api

# pages/index.js
cat > pages/index.js <<'JS'
export default function Home() {
  return (
    <main style={{padding: 24, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto'}}>
      <h1>WhatsApp Hub</h1>
      <p>Deployment OK. Webhook route is at <code>/api/wa</code>.</p>
      <ul>
        <li><a href="/api/wa?ping=1">Ping webhook</a></li>
      </ul>
    </main>
  );
}
JS

# pages/api/wa.js
cat > pages/api/wa.js <<'JS'
// pages/api/wa.js
export default async function handler(req, res) {
  // sanity check
  if (req.query.ping === '1') return res.status(200).send('pong-v3');

  if (req.method === 'GET') {
    // Meta "Verify and Save" challenge
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];

    // Use env if available; fall back to your chosen token
    const SERVER_TOKEN = process.env.VERIFY_TOKEN || 'mango-ice-48291';

    if (mode === 'subscribe' && token === SERVER_TOKEN) {
      return res.status(200).send(challenge);
    }
    return res.status(403).send('Forbidden');
  }

  if (req.method === 'POST') {
    // Inbound webhook event (messages / statuses)
    try {
      const body = req.body ?? {};
      console.log('WEBHOOK EVENT:', JSON.stringify(body, null, 2));
    } catch (e) {
      console.log('WEBHOOK EVENT parse error:', e?.message);
    }
    return res.status(200).send('EVENT_RECEIVED');
  }

  res.setHeader('Allow', ['GET', 'POST']);
  return res.status(405).end('Method Not Allowed');
}
JS

# pages/api/check-env.js (optional helper)
cat > pages/api/check-env.js <<'JS'
// pages/api/check-env.js
export default function handler(req, res) {
  res.status(200).json({
    VERIFY_TOKEN_PRESENT: !!process.env.VERIFY_TOKEN,
    VERIFY_TOKEN_LENGTH: process.env.VERIFY_TOKEN?.length || 0
  });
}
JS
